/*
1) Для практикума из занятия 7 продумать, где можно применить замыкания
В функции startGame() для подсчета количества сыгранных игр можно возвращать функцию,
считающую и записывающую в соответствующий блок на экране количество игр.

2) Не выполняя кода, ответить, что выведет браузер и почему

if (!("a" in window)) {
    var a = 1;
}
alert(a); //undefined

В момент инициализации объявление var создаёт свойство window.a со значением undefined,
поскольку условие if не выполняется, значение a не меняется.

var b = function a(x) {
    x && a(--x);
};
alert(a); //ошибка - a не определена

Переменную a, к которой обращаются, не объявляли.

function a(x) {
    return x * 2;
}
var a;
alert(a); //код функции a

Объявление функции имеет приоритет над объявлениями переменных, 
но не над присваиванием переменной, поэтому в переменную а запишется функция.

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3); //10

В псевдомассиве аргументов (arguments) второму аргументу функции (счет начинается с 0) 
присваивается значение 10 (a=10).

function a() {
    alert(this);
}
a.call(null); //object Window

Значение null не относится ни к одному из типов и образует свой отдельный тип,
состоящий из единственного значения null. 
Без use strict, при указании аргумента null или undefined в call/apply,
функция получает this = window. 
*/